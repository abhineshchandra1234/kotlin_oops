//ref 
  //Code
    //https://www.tutorialspoint.com/kotlin/index.htm
  //Content
    //tutorialspoint - https://www.tutorialspoint.com/kotlin/index.htm
    //programiz - https://www.programiz.com/kotlin-programming
//Inheritance
  //inheritance means accruing some properties of the mother class into the child class.
  //Everything in Kotlin is by default final, hence, we need to use the keyword “open” in front of the class declaration to make it allowable to inherit.
  //override 
    //It means child class is using function of parent class to do some other task
//Extension
  //In function extension, Kotlin allows to define a method outside of the main class.
//Sealed Class  
  //sealed class restricts the possibility of creating subclasses. And, when you handle all subclasses of a sealed class in an when expression, 
  it's not necessary to use else branch.
  //A sealed class can have its own subclass but all those subclasses need to be declared inside the same Kotlin file along with the sealed class.
  //In the above example, we have one sealed class named “MyExample”, which can be of two types only - one is “OP1” and another one is “OP2”. 
//Constructors
  //It is used to give default features to class
  //One Kotlin class can have one primary constructor, and one or more secondary constructor.
  //This secondary constructor is created using the “constructor” keyword. It is required whenever you want to create more than 
  //one constructor in Kotlin or whenever you want to include more
  //logic in the primary constructor and you cannot do that because the primary constructor may be called by some other class.
//Data Classes
  //A class can be marked as a Data class whenever it is marked as ”data”. 
  //This type of class can be used to hold the basic data apart. Other than this, it does not provide any other functionality.
  //All the data classes need to have one primary constructor and all the primary constructor should have at least one parameter.
//Interface
  // they can contain method implementation as well as abstract methods declaration. An interface can be implemented by a class in order to use its defined functionality.
  //Kotlin doesn’t support multiple inheritances, however, the same thing can be achieved by implementing more than two interfaces at a time.
  //In the following example, we will create two interfaces and later we will implement both the interfaces into a class.
